#!/usr/bin/python3

from __future__ import print_function
import random, sys

def trigramGen(filename):
    '''
    Opens a text file and reads and splits the contents in order to
    produce a trigram dictionary for each word in text file.

    :param filename: text file in same directory 
    :type filename: text file

    :returns: a dict mapping each word to the next two words in 
    text file
    :rtype: dict
    '''

    infile = open(filename, 'r')
    text = infile.read().split()
    textDict = {}
    
    for i in range(len(text)-2):
        key = text[i] 
        value = text[i+1] + ' ' + text[i+2]

        if not key in textDict:
            textDict[key] = [value]
        else:
            textDict[key].append(value)
    return textDict

def nowSpeak(dict, word, number):
    '''
    Creates a trigramh "speech" by randomly choosing a bigram
    from speech dictionary for each last word in trigram.  Returns an
    appended list of these trigrams to approximate speech found in 
    target text file.

    :param dict: dictionary of unigrams mapped to following bigrams
    created from a text file passed to the program
    :type filename: dict

    :param word: word chosen at random from dictionary to begin 
    iteration through trigram generation
    :type word: str

    :param number: user-defined or randomly generated interger to 
    target the length of generated speech
    :type number: int

    :returns: an autogenerated segment of approximated human speech
    :rtype: str
    '''

    targThoughts = []
    targThoughts.append(word)
    
    for i in range(1,number):
        nextWord = random.choice(dict[word])
        if not nextWord:
            nextWord = random.choice(dict['of'])
        targThoughts.append(nextWord)
        words = nextWord.split()
        word = words[-1]
    return ' '.join(targThoughts)

def cutAtPunct(phrase):
    '''
    Ends autogenerated trigram at the punctuation mark closest to 
    user-specified or randomly generated ending point to make
    "speech" look more natural.
    Checks speech for punctuation marks and records the location
    of each mark.  Stops speech at the first punctuation mark
    after user-specified or randomly generated ending point.
    
    :param phrase: autogenerated string of trigrams created
    from user specified textfile
    :type phrase: str

    :returns: joined autogenerated trigram string
    :rtype: str
    '''

    punct = ['.', '!', '?']
    location = []
    stop = []
    words = phrase.split()
    number = int(len(words)/2)

    for i, j in enumerate (words):
        if j[-1] in punct:
            location.append(i)
    
    for item in location:
        if item > number:
            stop.append(item)
    try:
        endingPoint = stop[0]
    except IndexError:
        endingPoint = number
    
    trimmedString = ' '.join(words[0:(endingPoint+1)])
    
    return trimmedString

def main():
    if ((len(sys.argv) == 1) or (len(sys.argv) >3)):
        print('usage: ./triGram.py file-to-read (optional integer)')
        sys.exit(1)
    
    try:
        targNum = int(sys.argv[2])
    except (IndexError, ValueError) as e:        
        targNum = random.randint(50,300)
    
    targDict = (trigramGen(sys.argv[1]))
    startingWord = random.choice(list(targDict))
    wholePhrase = nowSpeak(targDict, startingWord, targNum)
    print(cutAtPunct(wholePhrase))


if __name__ == '__main__':
    main()
